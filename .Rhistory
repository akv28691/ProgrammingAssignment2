## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
#initialize cache matrix and set it to null
## Initialize the inverse property
inv <- null
set <- function(y)
{
x<<- y
inv <<- null
}
get <- function() {x}
setInverse <- function(inverse) {
inv <<- inverse
}
getInverse <- function() { inv}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
}
mat <- x$get()
inv <- solve(mat ,...)
x$setInverse(inv)
inv
}
makeCacheMatrix(matrix(1:4 ,4,4))
f <- makeCacheMatrix(matrix(1:4 ,4,4))
f <- makeCacheMatrix(matrix(1:4 , nrow = 4, ncol = 4))
f <- makeCacheMatrix(matrix(1:4) , nrow = 4, ncol = 4)
f <- makeCacheMatrix(matrix(1:8 , nrow = 4, ncol = 4))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
#initialize cache matrix and set it to null
## Initialize the inverse property
inv <- null
set <- function(y)
{
x<<- y
inv <<- null
}
get <- function() {x}
setInverse <- function(inverse) {
inv <<- inverse
}
getInverse <- function() { inv}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat ,...)
x$setInverse(inv)
inv
}
f <makeCacheMatrix(matrix(1:8 , 4 , 4))
f <- makeCacheMatrix(matrix(1:8 , 4 , 4))
pmatrix <- makeCacheMatrix(matrix(1:8 , 4 , 4))
source(chachematrix.R)
source("chachematrix.R")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
#initialize cache matrix and set it to null
## Initialize the inverse property
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() { x }
setInverse <- function(inverse) {inv <<- inverse}
getInverse <- function(inverse) {inv}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source("chachematrix.R")
f <- makeCacheMatrix(matrix(1:8 , 4 , 4))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
#initialize cache matrix and set it to null
## Initialize the inverse property
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() { x }
setInverse <- function(inverse) {inv <<- inverse}
getInverse <- function(inverse) {inv}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
f <- makeCacheMatrix(matrix(1:4 , 4 , 4))
